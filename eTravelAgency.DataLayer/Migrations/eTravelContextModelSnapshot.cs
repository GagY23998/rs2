// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTravelAgency.DataLayer.Data;

namespace eTravelAgency.DataLayer.Migrations
{
    [DbContext(typeof(eTravelContext))]
    partial class eTravelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eTravelAgency.Core.Models.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttractionDetails");

                    b.Property<string>("AttractionName");

                    b.Property<int>("CityId");

                    b.Property<byte[]>("Picture");

                    b.Property<byte[]>("ThumbnailImage");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName");

                    b.Property<int>("CountryId");

                    b.Property<byte[]>("Picture");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryDetails");

                    b.Property<string>("CountryName");

                    b.Property<byte[]>("Picture");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.CountryFavorites", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("UserId", "CountryId");

                    b.ToTable("CountryFavorites");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("HotelAddress");

                    b.Property<string>("HotelName");

                    b.Property<byte[]>("Picture");

                    b.Property<float>("Rating");

                    b.Property<int>("TotalVisits");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.HotelOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivalDate");

                    b.Property<int>("Discount");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HotelId");

                    b.Property<bool>("IsActive");

                    b.Property<float>("PricePerPerson");

                    b.Property<DateTime>("StartDate");

                    b.Property<byte[]>("ThumbnailImage");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelOffers");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HotelId");

                    b.Property<int>("HotelRating");

                    b.Property<DateTime>("RatingDate");

                    b.Property<int>("TransportCompanyId");

                    b.Property<int>("TransportRating");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("TransportCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Canceled");

                    b.Property<DateTime>("DateReserved");

                    b.Property<bool>("Finished");

                    b.Property<int>("HotelOfferId");

                    b.Property<int>("NumberOfDays");

                    b.Property<int>("NumberOfPersons");

                    b.Property<DateTime>("StartTripDate");

                    b.Property<float>("TotalPrice");

                    b.Property<int>("TransportOfferId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HotelOfferId");

                    b.HasIndex("TransportOfferId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.TransportCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<byte[]>("Picture");

                    b.Property<float>("Rating");

                    b.Property<int>("TotalReservations");

                    b.Property<string>("TransportCompanyName");

                    b.Property<int>("TransportTypeId");

                    b.HasKey("Id");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("TransportCompanies");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.TransportOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("Discount");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<float>("Price");

                    b.Property<DateTime>("StartDate");

                    b.Property<byte[]>("ThumbnailImage");

                    b.Property<int>("TransportCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TransportCompanyId");

                    b.ToTable("TransportOffers");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TransportTypeName");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<byte[]>("Picture");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.UserRoles", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Attraction", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.City", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Hotel", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.HotelOffer", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Rating", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTravelAgency.Core.Models.TransportCompany", "TransportCompany")
                        .WithMany()
                        .HasForeignKey("TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTravelAgency.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.Reservation", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.HotelOffer", "HotelOffer")
                        .WithMany()
                        .HasForeignKey("HotelOfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTravelAgency.Core.Models.TransportOffer", "TransportOffer")
                        .WithMany()
                        .HasForeignKey("TransportOfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTravelAgency.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.TransportCompany", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.TransportType", "TransportType")
                        .WithMany()
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.TransportOffer", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTravelAgency.Core.Models.TransportCompany", "TransportCompany")
                        .WithMany()
                        .HasForeignKey("TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eTravelAgency.Core.Models.UserRoles", b =>
                {
                    b.HasOne("eTravelAgency.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eTravelAgency.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
